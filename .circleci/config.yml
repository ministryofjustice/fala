version: 2.1
orbs:
  slack: circleci/slack@2.5.0
jobs:
  lint:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - run:
          name: Setup Python environment
          command: |
            pip install virtualenv
            virtualenv lint-env
            source lint-env/bin/activate
            pip install pip==18.1
      - restore_cache:
          keys:
            - pip-v1-{{ checksum "requirements/generated/requirements-lint.txt" }}
      - run:
          name: Install dependencies
          command: |
            source lint-env/bin/activate
            pip install --requirement requirements/generated/requirements-lint.txt
      - save_cache:
          key: pip-v1-{{ checksum "requirements/generated/requirements-lint.txt" }}
          paths:
            - "~/.cache/pip"
      - run:
          name: Lint with flake8
          command: |
            source lint-env/bin/activate
            flake8 fala
      - run:
          name: Check formatting with Black
          command: |
            source lint-env/bin/activate
            black --check fala

  test:
    docker:
      - image: cimg/python:3.7
    steps:
      - checkout
      - run:
          name: Setup Python environment
          command: |
            pip install virtualenv
            virtualenv env
            source env/bin/activate
            pip install setuptools pip==19.1 wheel
      - restore_cache:
          keys:
            - pip-v1-{{ checksum "requirements/generated/requirements-base.txt" }}
      - run:
          name: Install dependencies
          command: |
            source env/bin/activate
            pip install --requirement requirements/generated/requirements-base.txt
            pip check
      - save_cache:
          key: pip-v1-{{ checksum "requirements/generated/requirements-base.txt" }}
          paths:
            - "~/.cache/pip"
      - run:
          name: Run unit tests
          command: |
            source env/bin/activate
            python manage.py test

  build:
    docker:
      - image: docker:17.03-git
    steps:
      - checkout
      - setup_remote_docker:
          version: 17.03.0-ce
          docker_layer_caching: true
      - run:
          name: Login to the ECR Docker registry
          command: |
            apk add --no-cache --no-progress py2-pip
            pip install awscli
            ecr_login="$(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)"
            ${ecr_login}
      - run:
          name: Build Docker image
          command: |
            docker build --tag application:$CIRCLE_SHA1 \
              --label build.git.sha=$CIRCLE_SHA1 \
              --label build.git.branch=$CIRCLE_BRANCH \
              --label build.url=$CIRCLE_BUILD_URL \
              .
      - run:
          name: Validate Python version
          command: docker run --rm --tty --interactive application:$CIRCLE_SHA1 python --version | grep "3.7"
      - run:
          name: Tag and push Docker images
          command: |
            .circleci/tag_and_push_docker_image application:$CIRCLE_SHA1 ${ECR_DOCKER_REPO_BASE}

  deploy:
    parameters:
      environment:
        type: string
    docker:
      - image: ministryofjustice/cloud-platform-tools
    steps:
      - checkout
      - run:
          name: Authenticate with cluster
          command: |
            echo -n ${K8S_CLUSTER_CERT} | base64 -d > ./ca.crt
            kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./ca.crt --server=${K8S_SERVER_ADDRESS}
            kubectl config set-credentials circleci --token=${K8S_TOKEN}
            kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=${K8S_NAMESPACE}
            kubectl config use-context ${K8S_CLUSTER_NAME}
            kubectl --namespace=${K8S_NAMESPACE} get pods
      - deploy:
          name: Deploy to << parameters.environment >>
          command: |
            .circleci/deploy_to_kubernetes << parameters.environment >>
      - slack/status

workflows:
  version: 2
  build_test_and_deploy:
    jobs:
      - lint
      - test
      - build:
          requires:
            - lint
            - test
          context: laa-fala
      - staging_deploy_approval:
          type: approval
          requires:
            - build

      - deploy:
          name: staging_deploy_live
          environment: staging
          requires:
            - staging_deploy_approval
          context:
            - laa-fala
            - laa-fala-live-staging

      - production_deploy_approval:
          type: approval
          requires:
            - staging_deploy_live
          filters:
            branches:
              only:
                - master

      - deploy:
          name: production_deploy
          environment: production
          requires:
            - production_deploy_approval
          context:
            - laa-fala
            - laa-fala-live-production
