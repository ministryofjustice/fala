version: 2.1
orbs:
  slack: circleci/slack@2.5.0
  aws-cli: circleci/aws-cli@4.1 # use v4 of this orb
  aws-ecr: circleci/aws-ecr@9 # this orb doesn't support OIDC v2, so we use aws-cli to authenticate
  node: circleci/node@6.1.0


commands:
  aws-login-to-ecr-and-tagging:
    description: "Set up aws cli setup, creating target tagging and login into aws ecr"
    steps:
      - aws-cli/setup:
          role_arn: $ECR_ROLE_TO_ASSUME # this will use the env var
          region: $ECR_REGION # this will use the env var
      - run:
          name: Set ECR_TAG environment variable for use in next step
          command: |
            [[ "$CIRCLE_BRANCH" == "main" ]] && ECR_TAG="main-$CIRCLE_SHA1" || ECR_TAG="branch-$CIRCLE_SHA1"
            echo "export ECR_TAG=$ECR_TAG" >> "$BASH_ENV"
            source "$BASH_ENV"
      # Authenticate to the ECR repository using the standard command
      - run: |
          aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com

# ------------------
#
# JOBS
#
# ------------------

jobs:
  lint:
    docker:
      - image: cimg/python:3.12
    steps:
      - checkout
      - run:
          name: Setup Python environment
          command: |
            python -m venv lint-env
            source lint-env/bin/activate
      - restore_cache:
          keys:
            - pip-v1-{{ checksum "requirements/generated/requirements-lint.txt" }}
      - run:
          name: Install dependencies
          command: |
            source lint-env/bin/activate
            pip install --requirement requirements/generated/requirements-lint.txt
      - save_cache:
          key: pip-v1-{{ checksum "requirements/generated/requirements-lint.txt" }}
          paths:
            - "~/.cache/pip"
      - run:
          name: Lint with flake8
          command: |
            source lint-env/bin/activate
            flake8 fala
      - run:
          name: Check formatting with Black
          command: |
            source lint-env/bin/activate
            black --check fala
  pip-compile:
    docker:
      - image: cimg/python:3.12
    steps:
      - checkout
      - restore_cache:
          keys:
            - pip-v1-{{ checksum "requirements/generated/requirements-pre-commit.txt" }}
      - run:
          name: Install dependencies
          command: |
            pip install -r requirements/generated/requirements-pre-commit.txt
      - save_cache:
          key: pip-v1-{{ checksum "requirements/generated/requirements-pre-commit.txt" }}
          paths:
            - "~/.cache/pip"
      - run:
          name: Check for changes with pip-compile
          command: ls requirements/source/* | xargs pre-commit run pip-compile --show-diff-on-failure --files
  test:
    docker:
      - image: cimg/python:3.12
      - image: cimg/postgres:16.3
    steps:
      - checkout
      - run:
          name: Setup Python environment
          command: |
            python -m venv env
            source env/bin/activate
      - restore_cache:
          keys:
            - pip-v1-{{ checksum "requirements/generated/requirements-dev.txt" }}
      - run:
          name: Install dependencies
          command: |
            source env/bin/activate
            pip install --requirement requirements/generated/requirements-dev.txt
            playwright install --with-deps
            pip check
      - save_cache:
          key: pip-v1-{{ checksum "requirements/generated/requirements-dev.txt" }}
          paths:
            - "~/.cache/pip"
      - node/install:
          install-yarn: true
          node-version: '18.20.4'
      - run:
          name: Build assets
          command: |
            rm .nvmrc
            npm install
            npm run build
      - run:
          name: Run unit tests
          command: |
            source env/bin/activate
            python manage.py collectstatic --noinput
            python manage.py test
          environment:
            LAALAA_API_HOST: "https://laa-legal-adviser-api-staging.apps.live-1.cloud-platform.service.justice.gov.uk"
            DB_NAME: test
            DB_USER: postgres
            DB_HOST: localhost

  build:
    executor: aws-ecr/default # use the aws-ecr/default executor to start the docker daemon
    steps:
      # Checkout your repository
      - checkout
      - aws-login-to-ecr-and-tagging
      # Build and push your Docker image
      - aws-ecr/build_image:
          # Timeout extended, as it often exceeds 10 minute deadline
          no_output_timeout: 15m
          push_image: true
          account_id: $AWS_ECR_REGISTRY_ID
          tag: $ECR_TAG
          region: $ECR_REGION # this will use the env var
          repo: $ECR_REPOSITORY # this will use the env var
          extra_build_args: |
            --build-arg target=production
      # Validate the python version as 3.12
      - run:
          name: Validate Python version
          command: |
            docker run --rm --tty --interactive ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com/$ECR_REPOSITORY:$ECR_TAG python --version | grep "3.12"

  deploy_grafana:
    docker:
      - image: ministryofjustice/cloud-platform-tools
    steps:
      - checkout
      - run:
          name: Authenticate with cluster
          command: |
            echo -n ${K8S_CLUSTER_CERT} | base64 -d > ./ca.crt
            kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./ca.crt --server=${K8S_SERVER_ADDRESS}
            kubectl config set-credentials circleci --token=${K8S_TOKEN}
            kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=${K8S_NAMESPACE}
            kubectl config use-context ${K8S_CLUSTER_NAME}
      - run:
          name: Deploy Grafana Dashboards
          command: |
            kubectl apply -f ./kubernetes_deploy/staging/ingress-dashboard.yml
            kubectl apply -f ./kubernetes_deploy/staging/pods-dashboard.yml

  deploy:
    parameters:
      environment:
        type: string
    docker:
      - image: ministryofjustice/cloud-platform-tools
    steps:
      - checkout
      - aws-login-to-ecr-and-tagging
      - run:
          name: Authenticate with cluster
          command: |
            echo -n ${K8S_CLUSTER_CERT} | base64 -d > ./ca.crt
            kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./ca.crt --server=https://${K8S_CLUSTER_NAME}
            kubectl config set-credentials circleci --token=${K8S_TOKEN}
            kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=${K8S_NAMESPACE}
            kubectl config use-context ${K8S_CLUSTER_NAME}
            echo ${K8S_CLUSTER_NAME}
      - run:
          name: ECR config
          command: |
            echo "export ECR_ENDPOINT=$AWS_ECR_REGISTRY_ID.dkr.ecr.$ECR_REGION.amazonaws.com/$ECR_REPOSITORY" >> $BASH_ENV
      - run:
          name: Deploy to << parameters.environment >>
          command: |
            .circleci/deploy_to_kubernetes << parameters.environment >>
      - slack/status


  deploy_with_helm:
    parameters:
      environment:
        type: string
    docker:
      - image: ministryofjustice/cloud-platform-tools
    steps:
      - checkout
      - aws-login-to-ecr-and-tagging
      - run:
          name: Authenticate with cluster
          command: |
            echo -n ${K8S_CLUSTER_CERT} | base64 -d > ./ca.crt
            kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./ca.crt --server=https://${K8S_CLUSTER_NAME}
            kubectl config set-credentials circleci --token=${K8S_TOKEN}
            kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=${K8S_NAMESPACE}
            kubectl config use-context ${K8S_CLUSTER_NAME}
            echo ${K8S_CLUSTER_NAME}
      - run:
          name: ECR config
          command: |
            echo "export ECR_ENDPOINT=$AWS_ECR_REGISTRY_ID.dkr.ecr.$ECR_REGION.amazonaws.com/$ECR_REPOSITORY" >> $BASH_ENV
      - run:
          name: Deploy to << parameters.environment >>
          command: |
            bin/deploy.sh << parameters.environment >>
      - slack/status

workflows:
  version: 2
  build_test_and_deploy:
    jobs:
      - lint
      - pip-compile
      - test:
          requires:
            - lint
            - pip-compile
      - build:
          requires:
            - test
          context: laa-fala

      - deploy_with_helm:
          name: Deploy UAT branch
          environment: staging
          requires:
            - build
          filters:
            branches:
              ignore:
                - main
          context:
            - laa-fala
            - laa-fala-live-staging

      - staging_deploy_approval:
          type: approval
          requires:
            - build
          filters:
            branches:
              only:
                - main

      - deploy_with_helm:
          name: Helm Staging Deploy
          environment: staging
          requires:
            - staging_deploy_approval
          filters:
            branches:
              only:
                - main
          context:
            - laa-fala
            - laa-fala-live-staging

      - deploy_grafana:
          name: deploy_grafana
          requires:
            - staging_deploy_approval
          filters:
            branches:
              only:
                - main
          context:
            - laa-fala
            - laa-fala-live-staging

      - production_deploy_approval:
          type: approval
          requires:
            - Helm Staging Deploy
          filters:
            branches:
              only:
                - main

      - deploy:
          name: production_deploy
          environment: production
          requires:
            - production_deploy_approval
          filters:
            branches:
              only:
                - main
          context:
            - laa-fala
            - laa-fala-live-production

      - deploy_with_helm:
          name: helm_production_deploy
          environment: production
          requires:
            - production_deploy_approval
            - production_deploy
          filters:
            branches:
              only:
                - main
          context:
            - laa-fala
            - laa-fala-live-production
