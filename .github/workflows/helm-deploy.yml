name: Deploy to Kubernetes with Helm

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '20.17.0'
  AWS_REGION: ${{  vars.ECR_REGION }}
  ECR_ENDPOINT: ${{ secrets.ECR_REGISTRY_URL }}.dkr.ecr.${{ vars.ECR_REGION }}.amazonaws.com/${{ vars.ECR_REPOSITORY }}

jobs:
  lint:
    name: Lint & format
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-lint-${{ hashFiles('requirements/generated/requirements-lint.txt') }}

      - name: Install lint deps
        run: |
          python -m venv lint-env
          source lint-env/bin/activate
          pip install -r requirements/generated/requirements-lint.txt

      - name: flake8
        run: |
          source lint-env/bin/activate
          flake8 fala

      - name: Black check
        run: |
          source lint-env/bin/activate
          black --check fala

# ------------------------------------------------------------ pip-compile ---
  pip-compile:
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-precommit-${{ hashFiles('requirements/generated/requirements-pre-commit.txt') }}

      - name: Install pre-commit env
        run: |
          pip install -r requirements/generated/requirements-pre-commit.txt

      - name: pip-compile diff check
        run: |
          ls requirements/source/* | \
          xargs pre-commit run pip-compile --show-diff-on-failure --files

# ---------------------------------------------------------------- test ------
  test:
    runs-on: ubuntu-latest
    needs: [lint, pip-compile]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-dev-${{ hashFiles('requirements/generated/requirements-dev.txt') }}

      - name: Install dev deps
        run: |
          python -m venv env
          source env/bin/activate
          pip install -r requirements/generated/requirements-dev.txt
          playwright install --with-deps
          sudo apt-get update && sudo apt-get install -y --no-install-recommends gettext
          pip check

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build assets
        run: |
          npm ci
          npm run build

      - name: Django tests
        env:
          LAALAA_API_HOST: "https://laa-legal-adviser-api-staging.apps.live-1.cloud-platform.service.justice.gov.uk"
        run: |
          source env/bin/activate
          python manage.py compilemessages -l cy
          python manage.py collectstatic --noinput
          python manage.py test

# ---------------------------------------------------------------- build -----
  build:
    name: Build & push Docker image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      id-token: write    # for AWS OIDC
      contents: read

    steps:
      - uses: actions/checkout@v4

      # ---------- AWS auth (OIDC) ----------
      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@4.2.1
        with:
          role-to-assume: ${{ secrets.ECR_ROLE_TO_ASSUME }}
          aws-region: ${{  vars.ECR_REGION }}

      - name: Image tag
        id: vars
        run: |
          if [ "${GITHUB_REF_NAME}" = "main" ]; then
            echo "tag=main-${GITHUB_SHA}" >> $GITHUB_OUTPUT
          else
            echo "tag=branch-${GITHUB_SHA}" >> $GITHUB_OUTPUT
          fi

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076

      - name: Build & push
        run: |
          docker build \
            --build-arg target=production \
            -t $ECR_ENDPOINT:${{ steps.vars.outputs.tag }} .
          docker push $ECR_ENDPOINT:${{ steps.vars.outputs.tag }}

      - name: Validate Python version in image
        run: |
          docker run --rm $ECR_ENDPOINT:${{ steps.vars.outputs.tag }} \
            python --version | grep "3.12"

# --------------------------------------------------------- deploy-staging ---
  deploy-staging:
    name: Deploy (staging / UAT)
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/')
    env:
      K8S_NAMESPACE: ${{ secrets.AUTOGENERATED_FALA_STAGING_K8S_NAMESPACE }}
      ENV_NAME: ${{ github.ref == 'refs/heads/main' && 'staging' || 'staging' }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ECR_ROLE_TO_ASSUME }}
          aws-region: ${{  vars.ECR_REGION }}

      - name: Set ECR_ENDPOINT (again for fresh runner)
        run: echo "ECR_ENDPOINT=$ECR_ENDPOINT" >> $GITHUB_ENV

      - name: Authenticate to cluster
        uses: ministryofjustice/laa-reusable-github-actions/.github/actions/authenticate_to_cluster@718424912b7cac2b905764128f52ee7c99241507
        with:
          kube-cert:    ${{ secrets.AUTOGENERATED_FALA_STAGING_K8S_CLUSTER_CERT }}
          kube-token:   ${{ secrets.AUTOGENERATED_FALA_STAGING_K8S_TOKEN }}         
          kube-cluster: ${{ secrets.AUTOGENERATED_FALA_STAGING_K8S_CLUSTER_NAME }}
          kube-namespace: ${{ secrets.AUTOGENERATED_FALA_STAGING_K8S_NAMESPACE }}

      - name: Deploy script
        run: bin/deploy.sh ${{ env.ENV_NAME }}

