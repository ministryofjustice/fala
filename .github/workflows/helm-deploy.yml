name: Deploy to Kubernetes with Helm

on:
  pull_request:
    branches: ['**']
  push:
    branches: [main]

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '20.17.0'

jobs:
  lint:
    name: Lint & format
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-lint-${{ hashFiles('requirements/generated/requirements-lint.txt') }}

      - name: Install lint deps
        run: |
          python -m venv lint-env
          source lint-env/bin/activate
          pip install -r requirements/generated/requirements-lint.txt

      - name: flake8
        run: |
          source lint-env/bin/activate
          flake8 fala

      - name: Black check
        run: |
          source lint-env/bin/activate
          black --check fala

# ------------------------------------------------------------ pip-compile ---
  pip-compile:
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-precommit-${{ hashFiles('requirements/generated/requirements-pre-commit.txt') }}

      - name: Install pre-commit env
        run: |
          pip install -r requirements/generated/requirements-pre-commit.txt

      - name: pip-compile diff check
        run: |
          ls requirements/source/* | \
          xargs pre-commit run pip-compile --show-diff-on-failure --files

# ---------------------------------------------------------------- test ------
  test:
    runs-on: ubuntu-latest
    needs: [lint, pip-compile]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-dev-${{ hashFiles('requirements/generated/requirements-dev.txt') }}

      - name: Install dev deps
        run: |
          python -m venv env
          source env/bin/activate
          pip install -r requirements/generated/requirements-dev.txt
          playwright install --with-deps
          sudo apt-get update && sudo apt-get install -y --no-install-recommends gettext
          pip check

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build assets
        run: |
          npm ci
          npm run build

      - name: Django tests
        env:
          LAALAA_API_HOST: "https://laa-legal-adviser-api-staging.apps.live-1.cloud-platform.service.justice.gov.uk"
        run: |
          source env/bin/activate
          python manage.py compilemessages -l cy
          python manage.py collectstatic --noinput
          python manage.py test

# ---------------------------------------------------------- build (new) -----
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up AWS credentials for ECR and Kubernetes
        uses: aws-actions/configure-aws-credentials@v4.2.1
        with:
          role-to-assume: ${{ secrets.FALA_ECR_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.FALA_ECR_REGION }}

      - uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076
        id: login-ecr

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435
        with:
          install: true

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set image tag
        id: branch-tag
        run: |
          if [ "${GITHUB_REF_NAME}" = "main" ]; then
            echo "tag=main-${GITHUB_SHA}" >> "$GITHUB_OUTPUT"
          else
            echo "tag=branch-${GITHUB_SHA}" >> "$GITHUB_OUTPUT"
          fi

      - name: Build and push image with local action
        uses: ./.github/actions/build_and_push
        with:
          repo_full_uri:  ${{ secrets.FALA_ECR_REPO_URI }}
          dockerfile_path: Dockerfile
          image_tag:      ${{ steps.branch-tag.outputs.tag }}

# --------------------------------------------------------- deploy-staging ---
  deploy-staging:
    name: Deploy (staging / UAT)
    runs-on: ubuntu-latest
    needs: build
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to staging with composite action
        uses: ./.github/actions/deploy
        with:
          ecr-registry_url: ${{ secrets.FALA_ECR_REPO_URI }}
          kube-cert:        ${{ secrets.FALA_K8S_CLUSTER_CERT }}
          kube-token:       ${{ secrets.FALA_K8S_TOKEN }}
          kube-cluster:     ${{ secrets.FALA_K8S_CLUSTER_NAME }}
          kube-namespace:   ${{ secrets.FALA_K8S_NAMESPACE }}
          app-environment:  staging

  # --------------------------------------------------------- deploy-production ---
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref_name == 'main'
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to staging with composite action
        uses: ./.github/actions/deploy
        with:
          ecr-registry_url: ${{ secrets.FALA_ECR_REPO_URI }}
          kube-cert:        ${{ secrets.FALA_K8S_CLUSTER_CERT }}
          kube-token:       ${{ secrets.FALA_K8S_TOKEN }}
          kube-cluster:     ${{ secrets.FALA_K8S_CLUSTER_NAME }}
          kube-namespace:   ${{ secrets.FALA_K8S_NAMESPACE }}
          app-environment:  production

